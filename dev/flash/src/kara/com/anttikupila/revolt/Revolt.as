package com.anttikupila.revolt {	import flash.media.*;	import flash.display.*;	import flash.net.*;	import flash.events.*;	import flash.utils.*;	import flash.filters.DropShadowFilter;	import com.anttikupila.soundSpectrum.SoundProcessor;	import com.anttikupila.revolt.presets.*;	import __AS3__.vec.*;		public class Revolt extends Sprite {		private var sp:SoundProcessor;		private var gfx:BitmapData;		private var presetList:Array;		public  var presetInt:Timer;		public var preset:Preset;		private var lastChange:Number;		private var initialDelay:Timer;			function Revolt(w:uint, h:uint, changeVisualizer:Boolean = false) {					sp = new SoundProcessor();								gfx = new BitmapData(w, h, false, 0x000000)			var pic:Bitmap = new Bitmap(gfx);						addChild(pic);						presetList = new Array(new LineFourier(), new LineNoFourier(), new Explosion(), new LineSmooth(), new LineWorm(), new Tunnel());//			presetList = new Array(new LineWorm());						initialDelay = new Timer(710, 1);			initialDelay.addEventListener(TimerEvent.TIMER, setupTimer);			if(changeVisualizer) {				initialDelay.start();			}					// initialize			nextPreset(null);						//this.addEventListener(Event.ENTER_FRAME, compute);			buttonMode = true;			this.addEventListener(MouseEvent.CLICK, nextPreset);						presetInt = new Timer(1295, 0);			presetInt.addEventListener(TimerEvent.TIMER, nextTimedPreset);					}				private function compute(ev:Event):void {			//try {			//var soundArray:Array = sp.getSoundSpectrum(preset.fourier);			//preset.applyGfx(gfx, soundArray);			//}			//catch (e:Error) {				//trace("DAmm")				//}		}						public function drawSpectrum(e:Object) {			//trace("RV")					preset.applyGfx(gfx, e);								}				private function setupTimer(ev:Event):void {									presetInt.start();						nextPreset(null);		}				private function nextPreset(ev:Event):void {			var index:uint = Math.floor(Math.random()*presetList.length);			var newPreset:Preset = presetList[index];			if (newPreset != preset) {				preset = newPreset;				preset.init();				trace("next effect is '" + preset.toString().toLowerCase() + "'");			} else {				nextPreset(null);			}			lastChange = getTimer();		}				private function nextTimedPreset(ev:Event):void {			if (getTimer() - lastChange > 5000) {				nextPreset(ev);			}							}				public function die() {			    trace("KILL")			    initialDelay.stop();				initialDelay.removeEventListener(TimerEvent.TIMER, setupTimer);				initialDelay = null;				presetInt.stop();				presetInt.removeEventListener(TimerEvent.TIMER, nextTimedPreset);				presetInt = null;				buttonMode = false;				this.removeEventListener(Event.ENTER_FRAME, compute);				this.removeEventListener(MouseEvent.CLICK, nextPreset);								}	}}